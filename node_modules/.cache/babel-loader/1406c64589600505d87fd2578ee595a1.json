{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: ''\n    };\n    this.createCityOptions = this.createCityOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async handleChange(event) {\n    const {\n      selectedState\n    } = this.state;\n    const {\n      getSelectedState\n    } = this.props;\n    this.setState({\n      selectedState: event.target.value\n    });\n    await getSelectedState(selectedState);\n    await this.createCityOptions();\n  }\n\n  async createCityOptions() {\n    const {\n      country,\n      selectedState,\n      getCitys,\n      city\n    } = this.props;\n    console.log(selectedState);\n    await getCitys(country.iso2, selectedState);\n    console.log(city);\n  }\n\n  render() {\n    const {\n      states\n    } = this.props;\n    const {\n      selectedState\n    } = this.state;\n    console.log(selectedState);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: this.state.selectedState,\n      onChange: this.handleChange,\n      children: states ? states.map(stateName => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: stateName.iso2,\n          children: `${stateName.name} - ${stateName.iso2}`\n        }, stateName.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n  getSelectedState: input => dispatch(setSelectedState(input))\n});\n\nconst mapStateToProps = state => ({\n  states: state.states.states,\n  country: state.country.country,\n  selectedState: state.selectedState.selectedState\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx"],"names":["React","Component","connect","setSelectedState","requestCityAPI","SelectState","constructor","props","state","selectedState","createCityOptions","bind","handleChange","event","getSelectedState","setState","target","value","country","getCitys","city","console","log","iso2","render","states","map","stateName","name","mapDispatchToProps","dispatch","input1","input2","input","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEiB,QAAZC,YAAY,CAACC,KAAD,EAAQ;AACxB,UAAM;AAAEJ,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAuB,KAAKP,KAAlC;AACA,SAAKQ,QAAL,CAAc;AAACN,MAAAA,aAAa,EAAEI,KAAK,CAACG,MAAN,CAAaC;AAA7B,KAAd;AACA,UAAMH,gBAAgB,CAACL,aAAD,CAAtB;AACA,UAAM,KAAKC,iBAAL,EAAN;AACD;;AAEsB,QAAjBA,iBAAiB,GAAG;AACxB,UAAM;AAAEQ,MAAAA,OAAF;AAAWT,MAAAA,aAAX;AAA0BU,MAAAA,QAA1B;AAAoCC,MAAAA;AAApC,QAA6C,KAAKb,KAAxD;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ;AACA,UAAMU,QAAQ,CAACD,OAAO,CAACK,IAAT,EAAed,aAAf,CAAd;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKlB,KAAxB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ;AACA,wBACE;AAAQ,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,aAA1B;AAAyC,MAAA,QAAQ,EAAE,KAAKG,YAAxD;AAAA,gBACIa,MAAM,GAAGA,MAAM,CAACC,GAAP,CAAYC,SAAD,IAAgB;AACpC,4BACA;AACE,UAAA,KAAK,EAAEA,SAAS,CAACJ,IADnB;AAAA,oBAIK,GAAEI,SAAS,CAACC,IAAK,MAAKD,SAAS,CAACJ,IAAK;AAJ1C,WAEQI,SAAS,CAACC,IAFlB;AAAA;AAAA;AAAA;AAAA,gBADA;AAOD,OARU,CAAH,gBASN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AA3CiC;;AA8CpC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCX,EAAAA,QAAQ,EAAE,CAACY,MAAD,EAASC,MAAT,KAAoBF,QAAQ,CAAC1B,cAAc,CAAC2B,MAAD,EAASC,MAAT,CAAf,CADE;AAExClB,EAAAA,gBAAgB,EAAGmB,KAAD,IAAWH,QAAQ,CAAC3B,gBAAgB,CAAC8B,KAAD,CAAjB;AAFG,CAAf,CAA3B;;AAKA,MAAMC,eAAe,GAAI1B,KAAD,KAAY;AAClCiB,EAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAAN,CAAaA,MADa;AAElCP,EAAAA,OAAO,EAAEV,KAAK,CAACU,OAAN,CAAcA,OAFW;AAGlCT,EAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,CAAoBA;AAHD,CAAZ,CAAxB;;AAMA,eAAeP,OAAO,CAACgC,eAAD,EAAkBL,kBAAlB,CAAP,CAA6CxB,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: '',\n    };\n    this.createCityOptions = this.createCityOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async handleChange(event) {\n    const { selectedState } = this.state\n    const { getSelectedState } = this.props\n    this.setState({selectedState: event.target.value});\n    await getSelectedState(selectedState);\n    await this.createCityOptions();\n  }\n\n  async createCityOptions() {\n    const { country, selectedState, getCitys, city } = this.props;\n    console.log(selectedState);\n    await getCitys(country.iso2, selectedState);\n    console.log(city)\n  }\n\n  render() {\n    const { states } = this.props;\n    const { selectedState } = this.state\n    console.log(selectedState)\n    return(\n      <select value={this.state.selectedState} onChange={this.handleChange}>\n        { states ? states.map((stateName,) => {\n          return (\n          <option\n            value={stateName.iso2}\n            key={ stateName.name }\n          >\n            { `${stateName.name} - ${stateName.iso2}` }\n          </option>);\n        })\n        : <option>Loading</option> }\n      </select>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n  getSelectedState: (input) => dispatch(setSelectedState(input)),\n});\n\nconst mapStateToProps = (state) => ({\n  states: state.states.states,\n  country: state.country.country,\n  selectedState: state.selectedState.selectedState,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);\n"]},"metadata":{},"sourceType":"module"}