{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: []\n    };\n    this.handleChange = this.handleChange.bind(this); // this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      selectedState\n    } = this.state;\n    this.setState({\n      selectedState: event.target.value\n    });\n    console.log(selectedState);\n  } // const { getSelectedState } = this.props\n  // await getSelectedState(selectedState);\n  // async requestCitys() {\n  //   const { getCitys, country, selectedState, city } = this.props\n  //   console.log(selectedState, '1')\n  //   console.log(country, '2')\n  //   await getCitys(country.iso2, selectedState);\n  //   this.setState({city: city})\n  // }\n\n\n  render() {\n    const {\n      states\n    } = this.props;\n    const {\n      selectedState\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedState,\n      onChange: this.handleChange,\n      children: states && states.map(stateName => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: stateName.iso2,\n        children: `${stateName.name} - ${stateName.iso2}`\n      }, stateName.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getSelectedState: input => dispatch(setSelectedState(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2))\n});\n\nconst mapStateToProps = state => ({\n  states: state.states.states,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country,\n  city: state.city.city\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx"],"names":["React","Component","connect","setSelectedState","requestCityAPI","SelectState","constructor","props","state","selectedState","handleChange","bind","event","setState","target","value","console","log","render","states","map","stateName","iso2","name","mapDispatchToProps","dispatch","getSelectedState","input","getCitys","input1","input2","mapStateToProps","country","city"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CALiB,CAMjB;AACD;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClB,UAAM;AAAEH,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,SAAKK,QAAL,CAAc;AAACJ,MAAAA,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAA7B,KAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACD,GAdiC,CAgBlC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKZ,KAAxB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,wBACE;AAAQ,MAAA,KAAK,EAAGC,aAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKC,YAA/C;AAAA,gBACIS,MAAM,IAAIA,MAAM,CAACC,GAAP,CAAYC,SAAD,iBACrB;AACE,QAAA,KAAK,EAAEA,SAAS,CAACC,IADnB;AAAA,kBAIK,GAAED,SAAS,CAACE,IAAK,MAAKF,SAAS,CAACC,IAAK;AAJ1C,SAEQD,SAAS,CAACE,IAFlB;AAAA;AAAA;AAAA;AAAA,cADU;AADd;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA3CiC;;AA8CpC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,gBAAgB,EAAGC,KAAD,IAAWF,QAAQ,CAACtB,gBAAgB,CAACwB,KAAD,CAAjB,CADG;AAExCC,EAAAA,QAAQ,EAAE,CAACC,MAAD,EAASC,MAAT,KAAoBL,QAAQ,CAACrB,cAAc,CAACyB,MAAD,EAASC,MAAT,CAAf;AAFE,CAAf,CAA3B;;AAKA,MAAMC,eAAe,GAAIvB,KAAD,KAAY;AAClCW,EAAAA,MAAM,EAAEX,KAAK,CAACW,MAAN,CAAaA,MADa;AAElCV,EAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,CAAoBA,aAFD;AAGlCuB,EAAAA,OAAO,EAAExB,KAAK,CAACwB,OAAN,CAAcA,OAHW;AAIlCC,EAAAA,IAAI,EAAEzB,KAAK,CAACyB,IAAN,CAAWA;AAJiB,CAAZ,CAAxB;;AAOA,eAAe/B,OAAO,CAAC6B,eAAD,EAAkBP,kBAAlB,CAAP,CAA6CnB,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    // this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  handleChange(event) {\n    const { selectedState } = this.state;\n    this.setState({selectedState: event.target.value});\n    console.log(selectedState)\n  }\n\n  // const { getSelectedState } = this.props\n  // await getSelectedState(selectedState);\n\n  // async requestCitys() {\n  //   const { getCitys, country, selectedState, city } = this.props\n  //   console.log(selectedState, '1')\n  //   console.log(country, '2')\n  //   await getCitys(country.iso2, selectedState);\n  //   this.setState({city: city})\n  // }\n\n  render() {\n    const { states } = this.props;\n    const { selectedState } = this.state;\n    return(\n      <select value={ selectedState } onChange={this.handleChange}>\n        { states && states.map((stateName,) => (\n          <option\n            value={stateName.iso2}\n            key={ stateName.name }\n          >\n            { `${stateName.name} - ${stateName.iso2}` }\n          </option>\n          ))\n        }\n      </select>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getSelectedState: (input) => dispatch(setSelectedState(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n});\n\nconst mapStateToProps = (state) => ({\n  states: state.states.states,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country,\n  city: state.city.city,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);\n"]},"metadata":{},"sourceType":"module"}