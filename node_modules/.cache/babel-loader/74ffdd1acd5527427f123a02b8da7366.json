{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      selectedCity: event.target.value\n    });\n  }\n\n  render() {\n    const {\n      city,\n      selectedState\n    } = this.props;\n    const {\n      selectedCity\n    } = this.state;\n    console.log(selectedCity);\n    console.log(city);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: this.handleChange,\n      children: selectedState === undefined ? /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 41\n      }, this) : city.map((cityName, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cityName.name,\n          children: cityName.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState\n});\n\nexport default connect(mapStateToProps)(SelectCity);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx"],"names":["React","Component","connect","SelectCity","constructor","props","state","selectedCity","handleChange","bind","event","setState","target","value","render","city","selectedState","console","log","undefined","map","cityName","index","name","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AADH,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAACJ,MAAAA,YAAY,EAAEG,KAAK,CAACE,MAAN,CAAaC;AAA5B,KAAd;AACD;;AAGDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAA0B,KAAKX,KAArC;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAmB,KAAKD,KAA9B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYX,YAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,wBACE;AAAQ,MAAA,KAAK,EAAGR,YAAhB;AAA+B,MAAA,QAAQ,EAAE,KAAKC,YAA9C;AAAA,gBACIQ,aAAa,KAAKG,SAAlB,gBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9B,GACAJ,IAAI,CAACK,GAAL,CAAS,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC9B,4BACA;AACE,UAAA,KAAK,EAAED,QAAQ,CAACE,IADlB;AAAA,oBAIIF,QAAQ,CAACE;AAJb,WAEQD,KAFR;AAAA;AAAA;AAAA;AAAA,gBADA;AAOD,OARC;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAjCgC;;AAoCnC,MAAME,eAAe,GAAIlB,KAAD,KAAY;AAClCS,EAAAA,IAAI,EAAET,KAAK,CAACS,IAAN,CAAWA,IADiB;AAElCC,EAAAA,aAAa,EAAEV,KAAK,CAACU,aAAN,CAAoBA;AAFD,CAAZ,CAAxB;;AAKA,eAAed,OAAO,CAACsB,eAAD,CAAP,CAAyBrB,UAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({selectedCity: event.target.value});\n  }\n\n\n  render() {\n    const { city, selectedState } = this.props;\n    const { selectedCity } = this.state;\n    console.log(selectedCity)\n    console.log(city)\n    return(\n      <select value={ selectedCity } onChange={this.handleChange}>\n        { selectedState === undefined ? <option>Loading</option>\n        : city.map((cityName, index) => {\n          return (\n          <option\n            value={cityName.name}\n            key={ index }\n          >\n            { cityName.name }\n          </option>);\n        }) }\n      </select>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState,\n});\n\nexport default connect(mapStateToProps)(SelectCity);\n"]},"metadata":{},"sourceType":"module"}