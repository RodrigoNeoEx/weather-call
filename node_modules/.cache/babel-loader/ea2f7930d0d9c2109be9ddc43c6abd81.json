{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: '',\n      city: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      selectedCity: event.target.value\n    });\n  }\n\n  async requestCitys() {\n    const {\n      country,\n      getCitys,\n      selectedState,\n      city\n    } = this.props;\n    await getCitys(country.iso2, selectedState);\n    console.log(city);\n  }\n\n  render() {\n    const {\n      city\n    } = this.props;\n    const {\n      selectedCity\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCity,\n      onChange: this.handleChange,\n      children: city ? city.map((cityName, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cityName.name,\n          children: cityName.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCitys: (countryIso, stateIso) => dispatch(requestCityAPI(countryIso, stateIso))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCity);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx"],"names":["React","Component","connect","requestCityAPI","SelectCity","constructor","props","state","selectedCity","city","handleChange","bind","event","setState","target","value","requestCitys","country","getCitys","selectedState","iso2","console","log","render","map","cityName","index","name","mapStateToProps","mapDispatchToProps","dispatch","countryIso","stateIso"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AACjCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,EADH;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAACL,MAAAA,YAAY,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAA5B,KAAd;AACD;;AAEiB,QAAZC,YAAY,GAAG;AACnB,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA,aAArB;AAAoCV,MAAAA;AAApC,QAA6C,KAAKH,KAAxD;AACA,UAAMY,QAAQ,CAACD,OAAO,CAACG,IAAT,EAAeD,aAAf,CAAd;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEd,MAAAA;AAAF,QAAW,KAAKH,KAAtB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAmB,KAAKD,KAA9B;AACA,wBACE;AAAQ,MAAA,KAAK,EAAGC,YAAhB;AAA+B,MAAA,QAAQ,EAAE,KAAKE,YAA9C;AAAA,gBACID,IAAI,GAAGA,IAAI,CAACe,GAAL,CAAS,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACrC,4BACA;AACE,UAAA,KAAK,EAAED,QAAQ,CAACE,IADlB;AAAA,oBAIIF,QAAQ,CAACE;AAJb,WAEQD,KAFR;AAAA;AAAA;AAAA;AAAA,gBADA;AAOD,OARQ,CAAH,gBASJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AArCgC;;AAwCnC,MAAME,eAAe,GAAIrB,KAAD,KAAY;AAClCE,EAAAA,IAAI,EAAEF,KAAK,CAACE,IAAN,CAAWA,IADiB;AAElCU,EAAAA,aAAa,EAAEZ,KAAK,CAACY,aAAN,CAAoBA,aAFD;AAGlCF,EAAAA,OAAO,EAAEV,KAAK,CAACU,OAAN,CAAcA;AAHW,CAAZ,CAAxB;;AAMA,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACxCZ,EAAAA,QAAQ,EAAE,CAACa,UAAD,EAAaC,QAAb,KAA0BF,QAAQ,CAAC3B,cAAc,CAAC4B,UAAD,EAAaC,QAAb,CAAf;AADJ,CAAf,CAA3B;;AAIA,eAAe9B,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CzB,UAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI } from '../redux/actions';\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: '',\n      city: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({selectedCity: event.target.value});\n  }\n\n  async requestCitys() {\n    const { country, getCitys, selectedState, city } = this.props;\n    await getCitys(country.iso2, selectedState);\n    console.log(city)\n  }\n\n  render() {\n    const { city } = this.props;\n    const { selectedCity } = this.state;\n    return(\n      <select value={ selectedCity } onChange={this.handleChange}>\n        { city ? city.map((cityName, index) => {\n          return (\n          <option\n            value={cityName.name}\n            key={ index }\n          >\n            { cityName.name }\n          </option>);\n        })\n        : <option>Loading</option> }\n      </select>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCitys: (countryIso, stateIso) => dispatch(requestCityAPI(countryIso, stateIso)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCity);\n"]},"metadata":{},"sourceType":"module"}