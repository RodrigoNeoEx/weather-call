{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI, setSelectedCity } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: '',\n      city: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      country,\n      selectedState,\n      getCitys\n    } = this.props;\n    getCitys(country.iso2, selectedState);\n  }\n\n  componentDidUpdate() {\n    const {\n      selectedCity\n    } = this.state;\n    const {\n      getSelectedCity\n    } = this.props;\n    getSelectedCity(selectedCity);\n  }\n\n  handleChange(event) {\n    this.setState({\n      selectedCity: event.target.value\n    });\n  }\n\n  async requestCitys() {\n    const {\n      country,\n      getCitys,\n      selectedState,\n      city\n    } = this.props;\n    await getCitys(country, selectedState);\n    city.map((cityName, index) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: cityName.name,\n        children: cityName.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this);\n    });\n  }\n\n  render() {\n    const {\n      city\n    } = this.props;\n    const {\n      selectedCity\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCity,\n        onChange: this.handleChange,\n        children: city ? city.map((cityName, index) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: cityName.name,\n            children: cityName.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.selectedCity.citySelected,\n  selectedState: state.selectedState.stateSelected,\n  country: state.country.country\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCitys: (countryIso, stateIso) => dispatch(requestCityAPI(countryIso, stateIso)),\n  getSelectedCity: input => dispatch(setSelectedCity(input))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCity);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectCity.jsx"],"names":["React","Component","connect","requestCityAPI","setSelectedCity","SelectCity","constructor","props","state","selectedCity","city","handleChange","bind","componentDidMount","country","selectedState","getCitys","iso2","componentDidUpdate","getSelectedCity","event","setState","target","value","requestCitys","map","cityName","index","name","render","mapStateToProps","citySelected","stateSelected","mapDispatchToProps","dispatch","countryIso","stateIso","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI, setSelectedCity } from '../redux/actions';\n\nclass SelectCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCity: '',\n      city: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const {country, selectedState, getCitys} = this.props;\n    getCitys(country.iso2, selectedState)\n  }\n\n  componentDidUpdate() {\n    const { selectedCity } = this.state;\n    const { getSelectedCity } = this.props\n    getSelectedCity(selectedCity);\n  }\n\n  handleChange(event) {\n    this.setState({selectedCity: event.target.value});\n  }\n\n  async requestCitys() {\n    const { country, getCitys, selectedState, city } = this.props;\n    await getCitys(country, selectedState);\n    city.map((cityName, index) => {\n      return (\n      <option\n        value={cityName.name}\n        key={ index }\n      >\n        { cityName.name }\n      </option>);\n    })\n  }\n\n  render() {\n    const { city } = this.props;\n    const { selectedCity } = this.state;\n    return(\n      <>\n      <select value={ selectedCity } onChange={this.handleChange}>\n        { city ? (\n          city.map((cityName, index) => {\n          return (\n          <option\n            value={cityName.name}\n            key={ index }\n          >\n            { cityName.name }\n          </option>);\n        }))\n          : <option>loading...</option> }\n      </select>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  selectedCity: state.selectedCity.citySelected,\n  selectedState: state.selectedState.stateSelected,\n  country: state.country.country,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCitys: (countryIso, stateIso) => dispatch(requestCityAPI(countryIso, stateIso)),\n  getSelectedCity: (input) => dispatch(setSelectedCity(input)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCity);\n"]},"metadata":{},"sourceType":"module"}