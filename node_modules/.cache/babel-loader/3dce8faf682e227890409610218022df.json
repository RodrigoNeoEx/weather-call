{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCountryAPI, requestStateAPI, requestCityAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      states: []\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.requestStates = this.requestStates.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleCountry() {\n    const {\n      getCountry\n    } = this.props;\n    const {\n      name\n    } = this.state;\n    await getCountry(name);\n    this.requestStates();\n  }\n\n  async requestStates() {\n    const {\n      country,\n      getStates,\n      states\n    } = this.props;\n    await getStates(country.iso2);\n    this.setState({\n      states: states\n    });\n  }\n\n  async requestCitys() {\n    const {\n      getCitys,\n      country,\n      selectedState\n    } = this.props;\n    console.log(selectedState, '1');\n    console.log(country, '2'); // await getCitys(country.iso2, selectedState)\n  }\n\n  render() {\n    const {\n      name,\n      states,\n      city\n    } = this.state;\n    console.log(city.length);\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Set your Country, state and city to show your weather in real time!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          maxLength: \"3\",\n          value: name,\n          onChange: this.handleChange,\n          className: \"inputCountry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submitCountry\",\n          onClick: this.handleCountry,\n          children: \"Set your country acronym\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), states.length === 0 ? '' : /*#__PURE__*/_jsxDEV(SelectState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(SelectCity, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCountry: input => dispatch(requestCountryAPI(input)),\n  getStates: input => dispatch(requestStateAPI(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx"],"names":["React","Component","connect","requestCountryAPI","requestStateAPI","requestCityAPI","SelectState","SelectCity","Header","constructor","props","state","name","states","handleCountry","bind","handleChange","requestStates","requestCitys","event","value","target","setState","getCountry","country","getStates","iso2","getCitys","selectedState","console","log","render","city","length","mapStateToProps","mapDispatchToProps","dispatch","input","input1","input2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCountryAPI, requestStateAPI, requestCityAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      states: [],\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.requestStates = this.requestStates.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  async handleCountry() {\n    const { getCountry } = this.props;\n    const { name } = this.state;\n    await getCountry(name);\n    this.requestStates();\n  }\n\n  async requestStates() {\n    const { country, getStates, states } = this.props;\n    await getStates(country.iso2);\n    this.setState({states: states})\n  }\n\n  async requestCitys() {\n    const { getCitys, country, selectedState } = this.props\n    console.log(selectedState, '1')\n    console.log(country, '2')\n    // await getCitys(country.iso2, selectedState)\n  }\n\n    render() {\n    const { name, states, city } = this.state;\n    console.log(city.length)\n    return(\n      <header>\n        <h1>Set your Country, state and city to show your weather in real time!</h1>\n        <form>\n          <input\n            type=\"text\"\n            name=\"name\"\n            maxLength=\"3\"\n            value={ name }\n            onChange={ this.handleChange }\n            className=\"inputCountry\"\n          />\n          <button\n           type=\"button\"\n           className=\"submitCountry\"\n           onClick={ this.handleCountry }\n           >\n            Set your country acronym\n          </button>\n          { states.length === 0 ? '' : <SelectState />}\n\n          <SelectCity />\n        </form>\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCountry: (input) => dispatch(requestCountryAPI(input)),\n  getStates: (input) => dispatch(requestStateAPI(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n"]},"metadata":{},"sourceType":"module"}