{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {\n      selectedState\n    } = this.state;\n    const {\n      getSelectedState\n    } = this.props;\n    getSelectedState(selectedState);\n  }\n\n  async handleChange(event) {\n    this.setState({\n      selectedState: event.target.value\n    });\n    this.requestCitys();\n  }\n\n  async requestCitys() {\n    const {\n      getCitys,\n      country\n    } = this.props;\n    const {\n      selectedState\n    } = this.state;\n    console.log(selectedState, '1');\n    console.log(country, '2'); // await getCitys(country.iso2, selectedState);\n  }\n\n  render() {\n    const {\n      states\n    } = this.props;\n    const {\n      selectedState\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedState,\n      onChange: this.handleChange,\n      children: states && states.map(stateName => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: stateName.iso2,\n        children: `${stateName.name} - ${stateName.iso2}`\n      }, stateName.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getSelectedState: input => dispatch(setSelectedState(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2))\n});\n\nconst mapStateToProps = state => ({\n  states: state.states.states,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country,\n  city: state.city.city\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx"],"names":["React","Component","connect","setSelectedState","requestCityAPI","SelectState","constructor","props","state","selectedState","handleChange","bind","requestCitys","componentDidUpdate","getSelectedState","event","setState","target","value","getCitys","country","console","log","render","states","map","stateName","iso2","name","mapDispatchToProps","dispatch","input","input1","input2","mapStateToProps","city"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEJ,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAuB,KAAKP,KAAlC;AACAO,IAAAA,gBAAgB,CAACL,aAAD,CAAhB;AAED;;AAEiB,QAAZC,YAAY,CAACK,KAAD,EAAQ;AACxB,SAAKC,QAAL,CAAc;AAACP,MAAAA,aAAa,EAAEM,KAAK,CAACE,MAAN,CAAaC;AAA7B,KAAd;AACA,SAAKN,YAAL;AACD;;AAEiB,QAAZA,YAAY,GAAG;AACnB,UAAM;AAAEO,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAwB,KAAKb,KAAnC;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYb,aAAZ,EAA2B,GAA3B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAAqB,GAArB,EAJmB,CAKnB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKjB,KAAxB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,wBACE;AAAQ,MAAA,KAAK,EAAGC,aAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKC,YAA/C;AAAA,gBACIc,MAAM,IAAIA,MAAM,CAACC,GAAP,CAAYC,SAAD,iBACrB;AACE,QAAA,KAAK,EAAEA,SAAS,CAACC,IADnB;AAAA,kBAIK,GAAED,SAAS,CAACE,IAAK,MAAKF,SAAS,CAACC,IAAK;AAJ1C,SAEQD,SAAS,CAACE,IAFlB;AAAA;AAAA;AAAA;AAAA,cADU;AADd;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA9CiC;;AAiDpC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,gBAAgB,EAAGiB,KAAD,IAAWD,QAAQ,CAAC3B,gBAAgB,CAAC4B,KAAD,CAAjB,CADG;AAExCZ,EAAAA,QAAQ,EAAE,CAACa,MAAD,EAASC,MAAT,KAAoBH,QAAQ,CAAC1B,cAAc,CAAC4B,MAAD,EAASC,MAAT,CAAf;AAFE,CAAf,CAA3B;;AAKA,MAAMC,eAAe,GAAI1B,KAAD,KAAY;AAClCgB,EAAAA,MAAM,EAAEhB,KAAK,CAACgB,MAAN,CAAaA,MADa;AAElCf,EAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,CAAoBA,aAFD;AAGlCW,EAAAA,OAAO,EAAEZ,KAAK,CAACY,OAAN,CAAcA,OAHW;AAIlCe,EAAAA,IAAI,EAAE3B,KAAK,CAAC2B,IAAN,CAAWA;AAJiB,CAAZ,CAAxB;;AAOA,eAAejC,OAAO,CAACgC,eAAD,EAAkBL,kBAAlB,CAAP,CAA6CxB,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { selectedState } = this.state;\n    const { getSelectedState } = this.props\n    getSelectedState(selectedState);\n\n  }\n\n  async handleChange(event) {\n    this.setState({selectedState: event.target.value});\n    this.requestCitys()\n  }\n\n  async requestCitys() {\n    const { getCitys, country } = this.props\n    const { selectedState } = this.state;\n    console.log(selectedState, '1')\n    console.log(country, '2')\n    // await getCitys(country.iso2, selectedState);\n  }\n\n  render() {\n    const { states } = this.props;\n    const { selectedState } = this.state;\n    return(\n      <select value={ selectedState } onChange={this.handleChange}>\n        { states && states.map((stateName,) => (\n          <option\n            value={stateName.iso2}\n            key={ stateName.name }\n          >\n            { `${stateName.name} - ${stateName.iso2}` }\n          </option>\n          ))\n        }\n      </select>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getSelectedState: (input) => dispatch(setSelectedState(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n});\n\nconst mapStateToProps = (state) => ({\n  states: state.states.states,\n  selectedState: state.selectedState.selectedState,\n  country: state.country.country,\n  city: state.city.city,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);\n"]},"metadata":{},"sourceType":"module"}