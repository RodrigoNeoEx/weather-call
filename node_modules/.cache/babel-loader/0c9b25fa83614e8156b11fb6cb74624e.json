{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCountryAPI, requestStateAPI, requestCityAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'BR',\n      states: [],\n      city: []\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.requestStates = this.requestStates.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleCountry();\n  }\n\n  componentDidUpdate() {}\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleCountry() {\n    const {\n      getCountry\n    } = this.props;\n    const {\n      name\n    } = this.state;\n    await getCountry(name);\n    await this.requestStates();\n  }\n\n  async requestStates() {\n    const {\n      country,\n      getStates,\n      states\n    } = this.props;\n    await getStates(country.iso2);\n    this.setState({\n      states: states\n    });\n    await this.requestCitys();\n  }\n\n  async requestCitys() {\n    const {\n      getCitys,\n      country,\n      selectedState,\n      city\n    } = this.props;\n    console.log(selectedState, '1');\n    console.log(country, '2');\n    await getCitys(country.iso2, selectedState);\n    this.setState({\n      city: city\n    });\n  }\n\n  render() {\n    const {\n      name,\n      states,\n      city\n    } = this.state;\n    console.log(city.length);\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Set your Country, state and city to show your weather in real time!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          maxLength: \"3\",\n          value: name,\n          onChange: this.handleChange,\n          className: \"inputCountry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submitCountry\",\n          onClick: this.handleCountry,\n          children: \"Set your country acronym\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), states.length === 0 ? '' : /*#__PURE__*/_jsxDEV(SelectState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 40\n        }, this), city.length === 0 ? '' : /*#__PURE__*/_jsxDEV(SelectCity, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCountry: input => dispatch(requestCountryAPI(input)),\n  getStates: input => dispatch(requestStateAPI(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx"],"names":["React","Component","connect","requestCountryAPI","requestStateAPI","requestCityAPI","SelectState","SelectCity","Header","constructor","props","state","name","states","city","handleCountry","bind","handleChange","requestStates","requestCitys","componentDidMount","componentDidUpdate","event","value","target","setState","getCountry","country","getStates","iso2","getCitys","selectedState","console","log","render","length","mapStateToProps","mapDispatchToProps","dispatch","input","input1","input2"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCountryAPI, requestStateAPI, requestCityAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'BR',\n      states: [],\n      city: [],\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.requestStates = this.requestStates.bind(this);\n    this.requestCitys = this.requestCitys.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleCountry()\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  async handleCountry() {\n    const { getCountry } = this.props;\n    const { name } = this.state;\n    await getCountry(name);\n    await this.requestStates();\n  }\n\n  async requestStates() {\n    const { country, getStates, states } = this.props;\n    await getStates(country.iso2);\n    this.setState({states: states})\n    await this.requestCitys();\n  }\n\n  async requestCitys() {\n    const { getCitys, country, selectedState, city } = this.props\n    console.log(selectedState, '1')\n    console.log(country, '2')\n    await getCitys(country.iso2, selectedState);\n    this.setState({city: city})\n  }\n\n    render() {\n    const { name, states, city } = this.state;\n    console.log(city.length)\n    return(\n      <header>\n        <h1>Set your Country, state and city to show your weather in real time!</h1>\n        <form>\n          <input\n            type=\"text\"\n            name=\"name\"\n            maxLength=\"3\"\n            value={ name }\n            onChange={ this.handleChange }\n            className=\"inputCountry\"\n          />\n          <button\n           type=\"button\"\n           className=\"submitCountry\"\n           onClick={ this.handleCountry }\n           >\n            Set your country acronym\n          </button>\n          { states.length === 0 ? '' : <SelectState /> }\n          { city.length === 0 ? '' : <SelectCity /> }\n        </form>\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city,\n  selectedState: state.selectedState.selectedState,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCountry: (input) => dispatch(requestCountryAPI(input)),\n  getStates: (input) => dispatch(requestStateAPI(input)),\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n"]},"metadata":{},"sourceType":"module"}