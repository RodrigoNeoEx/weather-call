{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async handleChange(event) {\n    const {\n      selectedState\n    } = this.state;\n    const {\n      getSelectedState,\n      getCitys,\n      country,\n      city\n    } = this.props;\n    this.setState({\n      selectedState: event.target.value\n    });\n    await getSelectedState(selectedState);\n    await getCitys(country.iso2, selectedState);\n  }\n\n  render() {\n    const {\n      states,\n      city\n    } = this.props;\n    const {\n      selectedState\n    } = this.state;\n    console.log(city);\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedState,\n      onChange: this.handleChange,\n      children: states ? states.map(stateName => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: stateName.iso2,\n          children: `${stateName.name} - ${stateName.iso2}`\n        }, stateName.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n  getSelectedState: input => dispatch(setSelectedState(input))\n});\n\nconst mapStateToProps = state => ({\n  states: state.states.states,\n  country: state.country.country,\n  selectedState: state.selectedState.selectedState\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/SelectState.jsx"],"names":["React","Component","connect","setSelectedState","requestCityAPI","SelectState","constructor","props","state","selectedState","handleChange","bind","event","getSelectedState","getCitys","country","city","setState","target","value","iso2","render","states","console","log","map","stateName","name","mapDispatchToProps","dispatch","input1","input2","input","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,kBAAjD;;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAClCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEiB,QAAZD,YAAY,CAACE,KAAD,EAAQ;AACxB,UAAM;AAAEH,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACA,UAAM;AAAEK,MAAAA,gBAAF;AAAoBC,MAAAA,QAApB;AAA8BC,MAAAA,OAA9B;AAAuCC,MAAAA;AAAvC,QAAgD,KAAKT,KAA3D;AACA,SAAKU,QAAL,CAAc;AAACR,MAAAA,aAAa,EAAEG,KAAK,CAACM,MAAN,CAAaC;AAA7B,KAAd;AACA,UAAMN,gBAAgB,CAACJ,aAAD,CAAtB;AACA,UAAMK,QAAQ,CAACC,OAAO,CAACK,IAAT,EAAeX,aAAf,CAAd;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,MAAF;AAAUN,MAAAA;AAAV,QAAmB,KAAKT,KAA9B;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACA,wBACE;AAAQ,MAAA,KAAK,EAAGP,aAAhB;AAAgC,MAAA,QAAQ,EAAE,KAAKC,YAA/C;AAAA,gBACIY,MAAM,GAAGA,MAAM,CAACG,GAAP,CAAYC,SAAD,IAAgB;AACpC,4BACA;AACE,UAAA,KAAK,EAAEA,SAAS,CAACN,IADnB;AAAA,oBAIK,GAAEM,SAAS,CAACC,IAAK,MAAKD,SAAS,CAACN,IAAK;AAJ1C,WAEQM,SAAS,CAACC,IAFlB;AAAA;AAAA;AAAA;AAAA,gBADA;AAOD,OARU,CAAH,gBASN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAnCiC;;AAsCpC,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCf,EAAAA,QAAQ,EAAE,CAACgB,MAAD,EAASC,MAAT,KAAoBF,QAAQ,CAACzB,cAAc,CAAC0B,MAAD,EAASC,MAAT,CAAf,CADE;AAExClB,EAAAA,gBAAgB,EAAGmB,KAAD,IAAWH,QAAQ,CAAC1B,gBAAgB,CAAC6B,KAAD,CAAjB;AAFG,CAAf,CAA3B;;AAKA,MAAMC,eAAe,GAAIzB,KAAD,KAAY;AAClCc,EAAAA,MAAM,EAAEd,KAAK,CAACc,MAAN,CAAaA,MADa;AAElCP,EAAAA,OAAO,EAAEP,KAAK,CAACO,OAAN,CAAcA,OAFW;AAGlCN,EAAAA,aAAa,EAAED,KAAK,CAACC,aAAN,CAAoBA;AAHD,CAAZ,CAAxB;;AAMA,eAAeP,OAAO,CAAC+B,eAAD,EAAkBL,kBAAlB,CAAP,CAA6CvB,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSelectedState, requestCityAPI } from '../redux/actions';\n\nclass SelectState extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async handleChange(event) {\n    const { selectedState } = this.state\n    const { getSelectedState, getCitys, country, city } = this.props\n    this.setState({selectedState: event.target.value});\n    await getSelectedState(selectedState);\n    await getCitys(country.iso2, selectedState);\n  }\n\n  render() {\n    const { states, city } = this.props;\n    const { selectedState } = this.state\n    console.log(city)\n    return(\n      <select value={ selectedState } onChange={this.handleChange}>\n        { states ? states.map((stateName,) => {\n          return (\n          <option\n            value={stateName.iso2}\n            key={ stateName.name }\n          >\n            { `${stateName.name} - ${stateName.iso2}` }\n          </option>);\n        })\n        : <option>Loading</option> }\n      </select>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCitys: (input1, input2) => dispatch(requestCityAPI(input1, input2)),\n  getSelectedState: (input) => dispatch(setSelectedState(input)),\n});\n\nconst mapStateToProps = (state) => ({\n  states: state.states.states,\n  country: state.country.country,\n  selectedState: state.selectedState.selectedState,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectState);\n"]},"metadata":{},"sourceType":"module"}