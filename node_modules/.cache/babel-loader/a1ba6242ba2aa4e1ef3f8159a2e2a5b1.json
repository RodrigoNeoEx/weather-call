{"ast":null,"code":"var _jsxFileName = \"/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI, requestCountryAPI, requestStateAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: ''\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createStatesOptions = this.createStatesOptions.bind(this);\n    this.createCityOptions = this.createCityOptions.bind(this);\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleCountry() {\n    const {\n      getCountry\n    } = this.props;\n    const {\n      name\n    } = this.state;\n    await getCountry(name);\n    this.createStatesOptions();\n  }\n\n  async createStatesOptions() {\n    const {\n      country,\n      getStates\n    } = this.props;\n    await getStates(country.iso2);\n    this.createCityOptions();\n  }\n\n  async createCityOptions() {\n    const {\n      country,\n      selectedState,\n      getCitys\n    } = this.props;\n    await getCitys(country, selectedState);\n  }\n\n  render() {\n    const {\n      name\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Set your Country, state and city to show your weather in real time!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          maxLength: \"3\",\n          value: name,\n          onChange: this.handleChange,\n          className: \"inputCountry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"submitCountry\",\n          onClick: this.handleCountry,\n          children: \"Set your country acronym\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SelectCity, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCountry: input => dispatch(requestCountryAPI(input)),\n  getStates: input => dispatch(requestStateAPI(input)),\n  getCitys: input => dispatch(requestCityAPI(input))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","map":{"version":3,"sources":["/home/neo/Desktop/gitHub/Personal Front End Projects/weather-call/src/components/Header.jsx"],"names":["React","Component","connect","requestCityAPI","requestCountryAPI","requestStateAPI","SelectState","SelectCity","Header","constructor","props","state","name","handleCountry","bind","handleChange","createStatesOptions","createCityOptions","event","value","target","setState","getCountry","country","getStates","iso2","selectedState","getCitys","render","mapStateToProps","states","city","mapDispatchToProps","dispatch","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestCityAPI, requestCountryAPI, requestStateAPI } from '../redux/actions';\nimport SelectState from './SelectState';\nimport SelectCity from './SelectCity';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n    };\n    this.handleCountry = this.handleCountry.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.createStatesOptions = this.createStatesOptions.bind(this);\n    this.createCityOptions = this.createCityOptions.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  async handleCountry() {\n    const { getCountry } = this.props;\n    const { name } = this.state;\n    await getCountry(name);\n    this.createStatesOptions();\n  }\n\n  async createStatesOptions() {\n    const { country, getStates } = this.props;\n    await getStates(country.iso2);\n    this.createCityOptions()\n  }\n\n  async createCityOptions() {\n    const { country, selectedState, getCitys } = this.props;\n    await getCitys(country, selectedState);\n  }\n\n    render() {\n    const { name } = this.state;\n    return(\n      <header>\n        <h1>Set your Country, state and city to show your weather in real time!</h1>\n        <form>\n          <input\n            type=\"text\"\n            name=\"name\"\n            maxLength=\"3\"\n            value={ name }\n            onChange={ this.handleChange }\n            className=\"inputCountry\"\n          />\n          <button\n           type=\"button\"\n           className=\"submitCountry\"\n           onClick={ this.handleCountry }\n           >\n            Set your country acronym\n          </button>\n          <SelectState />\n          <SelectCity />\n        </form>\n      </header>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  country: state.country.country,\n  states: state.states.states,\n  city: state.city.city,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCountry: (input) => dispatch(requestCountryAPI(input)),\n  getStates: (input) => dispatch(requestStateAPI(input)),\n  getCitys: (input) => dispatch(requestCityAPI(input))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n"]},"metadata":{},"sourceType":"module"}